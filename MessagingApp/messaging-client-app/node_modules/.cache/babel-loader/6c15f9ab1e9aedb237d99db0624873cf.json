{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ag/Fontys/IT/tickiesystem/MessagingApp/messaging-client-app/src/Components/Messaging.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { positions } from '@material-ui/system';\nimport Message from '../Components/Message';\nimport RenderMessages from '../Components/RenderMessages';\nimport { render } from 'react-dom';\nlet stompClient = null;\n\nconst onError = error => {};\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    margin: theme.spacing(3),\n    minWidth: 120,\n    boxSizing: 'border-box',\n    height: '80vh',\n    zIndex: '-1'\n  },\n  textField: {\n    position: \"relative\",\n    marginLeft: theme.spacing(3),\n    float: \"left\",\n    width: '78%',\n    zIndex: '1'\n  },\n  button: {\n    position: \"relative\",\n    float: \"right\",\n    marginRight: theme.spacing(3),\n    width: '18%',\n    zIndex: '1',\n    padding: theme.spacing(2)\n  },\n  div: {\n    position: \"absolute\",\n    backgroundColor: 'grey',\n    float: 'right',\n    width: '100%',\n    marginRight: theme.spacing(3)\n  }\n}));\nexport default function Messaging() {\n  _s();\n\n  let [messageCount, setmessageCount] = useState(0);\n  const [messages, setmessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({});\n  const [username, setusername] = useState('');\n\n  const connect = userName => {\n    if (userName) {\n      const Stomp = require('stompjs');\n\n      let SockJS = require('sockjs-client');\n\n      SockJS = new SockJS('http://localhost:8080/ws');\n      stompClient = Stomp.over(SockJS);\n      console.log(stompClient);\n      stompClient.connect({}, onConnected, onError);\n    }\n  };\n\n  const onMessageReceived = payload => {\n    if (payload) {\n      let message = JSON.parse(payload.body);\n      setNewMessage(message);\n      setmessageCount(messageCount++);\n      let m = newMessage;\n      let a = messages;\n      let ah = messages;\n      ah.push(message);\n      ah.forEach(element => {\n        setmessages([...messages, {\n          element\n        }]);\n      });\n    }\n  };\n\n  const onConnected = () => {\n    // Subscribing to the public topic\n    stompClient.subscribe('/topic/pubic', onMessageReceived); // Registering user to server as a public chat user\n\n    stompClient.send(\"/app/addUser\", {}, JSON.stringify({\n      sender: username,\n      message: 'JOIN'\n    }));\n  };\n\n  const sendMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        sender: username,\n        message: newMessage\n      }; // send public message\n\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      setNewMessage('');\n    }\n  };\n\n  const handleMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  useEffect(() => {\n    connect(username);\n    setusername(sessionStorage.getItem(\"user\"));\n  }, []);\n  useEffect(() => {\n    console.log(\"aide de\");\n  }, [messageCount]);\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(RenderMessages, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      onChange: event => handleMessageChange(event),\n      className: classes.textField,\n      id: \"filled-basic\",\n      label: \"Filled\",\n      variant: \"filled\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: () => sendMessage(),\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Messaging, \"QmBeGijHxzVQMmeGI7/RW/O259c=\", false, function () {\n  return [useStyles];\n});\n\n_c = Messaging;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messaging\");","map":{"version":3,"sources":["/home/ag/Fontys/IT/tickiesystem/MessagingApp/messaging-client-app/src/Components/Messaging.jsx"],"names":["React","useEffect","useState","TextField","Paper","makeStyles","Button","Grid","positions","Message","RenderMessages","render","stompClient","onError","error","useStyles","theme","container","margin","spacing","minWidth","boxSizing","height","zIndex","textField","position","marginLeft","float","width","button","marginRight","padding","div","backgroundColor","Messaging","messageCount","setmessageCount","messages","setmessages","newMessage","setNewMessage","username","setusername","connect","userName","Stomp","require","SockJS","over","console","log","onConnected","onMessageReceived","payload","message","JSON","parse","body","m","a","ah","push","forEach","element","subscribe","send","stringify","sender","sendMessage","chatMessage","handleMessageChange","event","target","value","sessionStorage","getItem","classes"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { positions } from '@material-ui/system';\nimport Message from '../Components/Message';\nimport RenderMessages from '../Components/RenderMessages';\nimport { render } from 'react-dom';\n\n\n\nlet stompClient = null;\n\n  const onError = (error) => {\n    \n  }\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n      margin: theme.spacing(3),\n      minWidth: 120,\n      boxSizing: 'border-box',\n      height: '80vh',\n      zIndex: '-1'\n      \n\n    },\n    textField: {\n        position: \"relative\",\n        marginLeft:theme.spacing(3),\n        float:\"left\", \n        width:'78%',\n        zIndex: '1'\n    },\n    button:{\n      position: \"relative\",\n        float:\"right\", \n        marginRight:theme.spacing(3),\n        width:'18%',\n        zIndex: '1',\n        padding: theme.spacing(2)\n    },\n    div:{\n      position: \"absolute\",\n      backgroundColor: 'grey',\n      float:'right',\n      width:'100%',\n      marginRight:theme.spacing(3)\n    }\n  }));\n\n\nexport default function Messaging() {\n\n  let [messageCount, setmessageCount] = useState(0);\n  const [messages, setmessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({});\n  const [username, setusername] = useState('')\n\n  \n\n\n\n  const connect = (userName) => {\n\n    if (userName) {\n\n      const Stomp = require('stompjs')\n\n      let SockJS = require('sockjs-client')\n\n      SockJS = new SockJS('http://localhost:8080/ws')\n\n      stompClient = Stomp.over(SockJS);\n\n      console.log(stompClient);\n\n      stompClient.connect({}, onConnected, onError);\n\n    }\n  }\n\n  const onMessageReceived = (payload) => {\n    if (payload) {\n      \n      let message = JSON.parse(payload.body);\n\n      setNewMessage(message);\n      setmessageCount(messageCount++);\n\n      let m = newMessage;\n      let a = messages;\n\n      let ah = messages;\n      ah.push(message);\n\n      ah.forEach(element => {\n        setmessages([...messages,{element}]);\n      });\n\n   \n    }\n      \n   }\n\n  const onConnected = () => {\n\n    // Subscribing to the public topic\n    stompClient.subscribe('/topic/pubic', onMessageReceived);\n  \n    // Registering user to server as a public chat user\n    stompClient.send(\"/app/addUser\", {}, JSON.stringify({ sender: username ,message:'JOIN' }))\n  \n  }\n\n  const sendMessage = () => {\n    if (stompClient) {\n      let chatMessage = {\n        sender: username,\n        message: newMessage\n  \n      };\n      // send public message\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n\n      setNewMessage('');\n\n    }\n  }\n\n  const handleMessageChange =(event) =>{\n\n    setNewMessage(event.target.value)\n  }\n\n  useEffect(() => {\n    connect(username);\n    setusername(sessionStorage.getItem(\"user\"))\n  },[])\n\n  useEffect(() => {\n    console.log(\"aide de\");\n\n  }, [messageCount])\n\n  \n\n    const classes = useStyles();\n\n    return (\n        <div>\n        <Paper elevation={3} className={classes.container}>\n        <Grid container spacing={3}>\n        <RenderMessages messages={messages} />\n        </Grid>\n        </Paper>\n\n        <TextField onChange={(event) => handleMessageChange(event)} className={classes.textField} id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n        <Button className={classes.button} variant=\"outlined\" color=\"primary\" onClick={() => sendMessage()}>Send</Button>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}